#!/usr/bin/python

from __future__ import print_function

import sys
import math
import StringIO

from opster import command, dispatch


def noop(*args):
    pass


def debug(stringfunc):
    result = stringfunc()
    if isinstance(result, str):
        result = [result]
    for line in result:
        print(f"##DEBUG >>> {line}")


debug = noop


def compute_newstyle_devilpoints(input):
    rdp = {}    # rank devil points per-player
    wdp = {}    # win devil points per-player
    plays = {}  # number of games played per-player
    wins = {}   # number of games won per-player
    for game, players in input:
        debug(lambda: repr(players))
        numplayers = len(players)
        winscore = max(players.values())
        for player, score in players.items():
            plays[player] = plays.get(player, 0) + 1
            aswell = len([x for x in players.values() if x >= score])
            aspoor = len([x for x in players.values() if x <= score])
            rdp[player] = rdp.get(player, 1.0) * aspoor / aswell
            if score != winscore:
                aswell = numplayers
                aspoor = len([x for x in players.values() if x < winscore])
            else:
                wins[player] = wins.get(player, 0) + 1
            wdp[player] = wdp.get(player, 1.0) * aspoor / aswell
    for player in rdp:
        rdp[player] = math.log(rdp[player])
        wdp[player] = math.log(wdp[player])
        wins[player] = wins.get(player, 0)
    return rdp, wdp, plays, wins


def cmp(a, b):
    if a < b:
        return -1
    if a > b:
        return 1
    return 0


def sorted_by_subentry(l, entry, mycmp=cmp):
    """sort a list of tuples by their (entry+1)'th entry"""
    def valcmp(x, y):
        if not isinstance(entry, list):
            return mycmp(x[entry], y[entry])
        for i in entry:
            result = mycmp(x[i], y[i])
            if result != 0:
                return result
        return 0
    c = l[:]
    c.sort(valcmp)
    return c


def sorted_bykey(d, mycmp=cmp):
    """sort a list of tuples by their 1st entry"""
    return sorted_by_subentry(d.items(), 0, mycmp=mycmp)


def sorted_byval(d, mycmp=cmp):
    """sort a dictionary by its values, return a sorted items() list"""
    return sorted_by_subentry(d.items(), 1, mycmp=mycmp)


def load_files(inputfiles, incfmt='.'):
    """Load the specified list of files as input files.
       Input files are python/json declarations of a list
       of tuples, where the first item in the tuple is the name
       of the game that was played and the second item is a
       dictionary of { player: devilpoints score, ... }
    """
    input = []
    for inputfile in inputfiles:
        print(incfmt.format(inputfile), end='')
        inputtext = "".join(open(inputfile).readlines())
        input += eval(inputtext)
    debug(lambda: "input:\n{0!r}".format(input))
    return input


def print_devil_rankings(rank, win, plays, wins):
    """Output nicely formatted devilpoint rank and winrank tables"""
    playercount = len(rank)
    rank = reversed(sorted_byval(rank))
    win = reversed(sorted_byval(win))
    maxnamelen = max([len(entry[0]) for entry in rank])
    namefmt = ">" + str(maxnamelen) + "s"
    maxplayedlen = max([len(str(x)) for x in plays.values()])
    playedfmt = ">" + str(maxplayedlen) + "d"
    fmtstr = ("{rankscore:> 2.4f} " +
              "{rankname:" + namefmt + "} " +
              "({rankplayed:" + playedfmt + "}) " +
              "{winscore:> 2.4f} " +
              "{winname:" + namefmt + "} won " +
              "{winwins:d} of " +
              "{winplayed:d}. ")

    # 10+maxnamelen = 7 + 1 + maxnamelen + 1 + 3 + 1 - 4
    print("Rank", " "*(10+maxnamelen), "Win", sep='')

    for i in range(playercount):
        rankname = rank[i][0]
        winname = win[i][0]
        info = {
            'rankscore': rank[i][1],
            'rankname': rankname,
            'rankplayed': plays[rankname],
            'winscore': win[i][1],
            'winname': winname,
            'winwins': wins[winname],
            'winplayed': plays[winname]
        }
        print(fmtstr.format(**info))


def print_all_games(inputdata):
    maxgamelen = max([len(play[0]) for play in inputdata])
    gamefmt = "{0:>" + str(maxgamelen) + "s} :: "
    for game, players in sorted_by_subentry(inputdata, 0):
        scores = reversed(sorted_byval(players))
        playerstr = ", ".join([f"{k}: {v!s}" for k, v in scores])
        print(gamefmt.format(game) + playerstr)


def process_or_error(inputfiles, msgfmt="Processing {0}...\n"):
    if len(inputfiles) < 1:
        print("Error: at least one input file must be specified.\n")
        sys.exit(1)
    print(msgfmt.format("+".join(inputfiles)), end='')
    input = load_files(inputfiles, '')
    return input


@command(usage=('%name INPUTFILES'))
def score(*inputfiles):
    '''Compute place and win rankings

    Compute the probability-based place and win rankings for the specified input files.
    '''

    input = process_or_error(inputfiles)

    rank, win, plays, wins = compute_newstyle_devilpoints(input)

    print(f"{len(rank)} players played {len(input)} games.\n")
    print_all_games(input)

    print("\nRankings...")
    print_devil_rankings(rank, win, plays, wins)


@command(usage=('%name INPUTFILES'))
def games(*inputfiles):
    '''Show all the games and how often they were played

    Give full details on what games are in the specified input files.
    '''

    input = process_or_error(inputfiles)

    plays = {}
    total = 0
    for game, players in input:
        plays[game] = plays.get(game, 0) + 1
        total += 1

    print("{0} plays of {1} games:\n".format(total, len(plays)))

    maxplaystrlen = len(str(max(plays.values())))
    gamefmt = "{0:>" + str(maxplaystrlen) + "} {1}"
    debug(lambda: "gamefmt = " + gamefmt)

    gamelist = sorted_by_subentry(plays.items(), [1, 0])
    for game, playcount in gamelist:
        print(gamefmt.format(playcount, game))


@command(usage=('%name INPUTFILES'))
def players(*inputfiles):
    '''Show all the players and how often they played

    Give full details on what players are in the specified input files.
    '''

    input = process_or_error(inputfiles)

    allplayers = {}
    total = 0
    pg = 0
    for game, players in input:
        for player in players.keys():
            allplayers[player] = allplayers.get(player, 0) + 1
            pg += 1
        total += 1

    headermsg = "{0} players played {1} games, averaging {2:>.4f} players/game\n"
    print(headermsg.format(len(allplayers), total, 1.0 * pg / total))

    maxplaystrlen = len(str(max(allplayers.values())))
    playerfmt = "{0:>" + str(maxplaystrlen) + "} {1}"

    for player, plays in sorted_bykey(allplayers):
        print(playerfmt.format(plays, player))


@command(usage=('%name PLAYERNAME INPUTFILES'))
def player(playername, *inputfiles):
    '''Show all the games played by a particular player
    '''

    input = process_or_error(inputfiles)

    plays = {}
    total = 0
    for game, players in input:
        if playername in players:
            plays[game] = plays.get(game, 0) + 1
            total += 1

    headermsg = '{0} played {1} plays of {2} unique games.\n'
    print(headermsg.format(playername, total, len(plays)))

    maxplaysstrlen = len(str(max(plays.values())))
    gamefmt = "{0:>" + str(maxplaysstrlen) + "} {1}"
    gamelist = sorted_by_subentry(plays.items(), [1, 0])
    for game, plays in gamelist:
        print(gamefmt.format(plays, game))


@command(usage=('%name NEWFILE OLDFILES...'))
def new_players(newfile, *oldfiles):
    '''Show any new players in newfile

    Compare the players in newfile to the players in oldfiles, and list any new players.  Useful to verify that you didn't typo a name.
    '''

    oldinput = process_or_error(oldfiles, "Loading {0}...")
    print("\nLoading new file", end='')
    newinput = load_files([newfile], '...\n')

    allplayers = set()
    for game, players in oldinput:
        allplayers.update(set(players.keys()))

    newplayers = set()
    for game, players in newinput:
        newplayers.update(set(players.keys()).difference(allplayers))

    if len(newplayers) == 0:
        print("No new players.")
        return

    print("{0} new players:\n".format(len(newplayers)))
    maxplayerstrlen = max(len(str(p)) for p in newplayers)
    playerfmt = "{0:>" + str(maxplayerstrlen) + "}"
    for player in newplayers:
        print(playerfmt.format(player))


@command(usage=('%name NEWFILE OLDFILES...'))
def new_games(newfile, *oldfiles):
    '''Show any new games in newfile

    Compare the games in newfile to the games in oldfiles, and list any new games.  Useful to verify that you didn't typo a name.
    '''

    oldinput = process_or_error(oldfiles, "Loading {0}...")
    print("\nLoading new file", end='')
    newinput = load_files([newfile], '...\n')

    allgames = set([game for game, p in oldinput])
    new = set([game for game, p in newinput if game not in allgames])

    if len(new) == 0:
        print("No new games.")
        return

    print("{0} new games:\n".format(len(new)))
    maxstrlen = max(len(str(p)) for p in new)
    fmt = "{0:>" + str(maxstrlen) + "}"
    for item in new:
        print(fmt.format(item))


def competed(raw, winner, loser):
    '''did winner ever directly play a game with loser?'''
    for game, players in raw:
        if winner in players and loser in players:
            debug(lambda: "competed({0},{1}) -> True".format(winner, loser))
            return True
    debug(lambda: "competed({0},{1}) -> False".format(winner, loser))
    return False


def downstream(d, node):
    '''d is a dictionary of lists
       n is the node name
       returns the set of all nodes in d's list catenated with
         the set of all those nodes' subnodes ad infinitum
    '''
    result = set(d[node])
    debug(lambda: "downstream({0},{1})".format(repr(d), node))
    for n in d[node]:
        result.update(downstream(d, n))
        debug(lambda: " => " + repr(result))
    return result


def minimize(d):
    '''minimized directed graph d'''
    # take out direct relationships that could be indirect
    for node in d:
        allsubs = [set(downstream(d, n)) for n in d[node]]
        allsubs = set([]).union(*allsubs)
        debug(lambda: "allsubs({0}): {1}".format(node, repr(allsubs)))
        d[node] = set(d[node]).difference(allsubs)
    return d


@command(usage=('%name graph INPUTFILES'))
def graph(*inputfiles):
    '''Produce input to feed to graphviz

    Produce input to feed to graphviz to graph rankings
    '''

    input = process_or_error(inputfiles, "# Processing {0}...\n")

    rank, win, plays, wins = compute_newstyle_devilpoints(input)
    players = rank.keys()

    # construct the directed graph
    result = dict([(x, []) for x in players])
    for aplayer in players:
        for bplayer in players:
            status = cmp(rank[aplayer], rank[bplayer]) + \
                     cmp(win[aplayer], win[bplayer])
            if status == 0:
                continue
            if status > 0:
                winner, loser = aplayer, bplayer
            elif status < 0:
                winner, loser = bplayer, aplayer
            if loser not in result[winner]:
                result[winner].append(loser)

    result = minimize(result)

    debug(lambda: "#result: " + repr(result))

    # output the graph
    print("digraph A {")

    for winner in result:
        for loser in result[winner]:
            print(' "{0}"->"{1}" ;'.format(winner, loser))

    print("}")


def get_stdout_of(f):
    realstdout = sys.stdout
    sys.stdout = StringIO.StringIO()
    f()
    retval = sys.stdout.getvalue()
    sys.stdout = realstdout
    return retval


@command(usage=('%name template TEMPLATE INPUTFILES'))
def template(templatefile, *inputfiles):
    '''Fill out a template

    Fill out the specified template with the scoring from the specified inputfiles
    '''

    input = process_or_error(inputfiles, "# Processing {0}...\n")

    rank, win, plays, wins = compute_newstyle_devilpoints(input)

    game_info = get_stdout_of(lambda: print_all_games(input))
    rank_info = get_stdout_of(lambda: print_devil_rankings(rank, win, plays, wins))

    vals = {
        'num_players': len(rank),
        'num_plays': len(input),
        'game_stats': game_info,
        'rankings': rank_info,
    }

    for line in open(templatefile, 'r'):
        print(line.strip('\n\r').format(**vals))


if __name__ == '__main__':
    dispatch()

